using System;
using System.Collections.Generic;
using System.Linq;

namespace lab
{
    class Program
    {
        static void Main(string[] args)
        {
            FindWords(new string[] { "adsdf", "sfd" });
        }
        struct strAmericanKeyBoard
        {
            public string FirstRow, SecoundRow, ThirdRow;
        }
        static string[] FindWords(string[] words)
        {

            List<string> result = new List<string>();

            for (int i = 0; i < words.Length; i++)
                if (isTypedUsingAmericanKeyBoardRows(words[i]))
                    result.Add(words[i]);

            return result.ToArray();
        }
        static bool isTypedUsingAmericanKeyBoardRows(string s)
        {
            strAmericanKeyBoard americanKeyBoard = new strAmericanKeyBoard();
            americanKeyBoard.FirstRow = "qwertyuiop";
            americanKeyBoard.SecoundRow = "asdfghjkl";
            americanKeyBoard.ThirdRow = "zxcvbnm";

            bool flag1 = true, flag2 = true, flag3 = true;

            s = new String(s.Distinct().ToArray());

            for (int i = 0; i < s.Length; i++)
            {
                if (flag1 && !contains(americanKeyBoard.FirstRow, charToLowerCase(s[i]).ToString()))
                {
                    flag1 = false;
                }
                if (flag2 && !contains(americanKeyBoard.SecoundRow, charToLowerCase(s[i]).ToString()))
                {
                    flag2 = false;
                }
                if (flag3 && !contains(americanKeyBoard.ThirdRow, charToLowerCase(s[i]).ToString()))
                {
                    flag3 = false;
                }

                if (flag1==false && flag2==false && flag3==false)
                    return false;
            }

            return flag1 || flag2 || flag3 ? true : false;
        }
        static bool contains(string haystack, string needle) => indexOf(haystack, needle) != -1 ? true : false;
        static int indexOf(string haystack, string needle)
        {
            if (needle.Length == 0) return 0;
            if (needle.Length > haystack.Length) return -1;
            if (haystack == needle) return 0;

            int counter = 0, oldIndex = 0;

            for (int i = 0; i < haystack.Length; i++)
            {
                oldIndex = i;
                if (haystack[i] == needle[0] && i <= haystack.Length - needle.Length)
                {
                    if ((i == haystack.Length - 1) && (counter == needle.Length)) return i;
                    for (int j = 0; j < needle.Length; j++)
                    {
                        if (haystack[i] == needle[j])
                        {
                            counter++;
                            i++;
                        }
                        else
                        {
                            i = oldIndex;
                            break;
                        }
                    }
                    if (counter == needle.Length) return oldIndex;
                    i = oldIndex;
                    counter = 0;
                }
            }
            return -1;
        }
        static char charToLowerCase(char c) => (int)c >= 65 && (int)c <= 90 ? (char)((int)c + 32) : c;
    }
}
