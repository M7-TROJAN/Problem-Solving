public class Solution {
    public IList<string> StringMatching(string[] words) {
         List<string> result = new List<string>();

    for(int i = 0; i < words.Length; i++)
    {
        for(int j = 0; j < words.Length; j++)
        {
            if (words[j] != words[i] && contains(words[j],words[i]) && !listContains(result,words[i]) )
                result.Add(words[i]);
        }
    }

    return result; 
    }
    
    static bool contains(string haystack, string needle)
{
    return indexOf(haystack, needle) != -1 ? true : false;
}

static int indexOf(string haystack, string needle)
{
    if (needle.Length == 0) return 0;
    if (needle.Length > haystack.Length) return -1;
    if (haystack == needle) return 0;

    int counter = 0, oldIndex = 0;

    for (int i = 0; i < haystack.Length; i++)
    {
        oldIndex = i;
        if (haystack[i] == needle[0] && i <= haystack.Length - needle.Length)
        {
            if ((i == haystack.Length - 1) && (counter == needle.Length)) return i;
            for (int j = 0; j < needle.Length; j++)
            {
                if (haystack[i] == needle[j])
                {
                    counter++;
                    i++;
                }
                else
                {
                    i = oldIndex;
                    break;
                }
            }
            if (counter == needle.Length) return oldIndex;
            i = oldIndex;
            counter = 0;
        }
    }
    return -1;
}

static bool listContains(List<string> lst, string str)
{
    for (int i = 0; i < lst.Count; i++)
        if (lst[i] == str)
            return true;

    return false;
}
   
    
}
