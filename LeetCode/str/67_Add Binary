public class Solution {
    public string AddBinary(string a, string b) {
        if (a == null || a == string.Empty || b == null || b == string.Empty)
            return a == null || a == string.Empty ? b : a;
        
        if (a.Length < b.Length)
            return AddBinary(b, a);
        
        StringBuilder res = new StringBuilder();
        int i = a.Length - 1,
            j = b.Length - 1;
        string carry = string.Empty;
        
        while (i > -1)
        {
            string cur = j > -1 ? Cal(Cal(a[i].ToString(), b[j--].ToString()), carry) : carry == string.Empty ? a[i].ToString() : Cal(a[i].ToString(), carry);
            
            carry = cur.Length > 1 ? cur[0].ToString() : string.Empty;
            
            res.Append(cur[cur.Length - 1]);
            
            i--;
        }
        
        if (carry != string.Empty)
            res.Append(carry[0]);
        
        return new string(res.ToString().Reverse().ToArray());
    }
    
    private string Cal(string a, string b)
    {
        if (a == string.Empty || b == string.Empty)
            return a == string.Empty ? b : a;
        
        if (a.Length > 1 || b.Length > 1)
        {
            if (a[a.Length - 1] == '1' || b[b.Length - 1] == '1')
                return "11";
            else
                return "10";
        }        
        else if (a[a.Length - 1] == b[b.Length - 1] && a[a.Length - 1] == '1')
            return "10";
        else if (a[a.Length - 1] == b[b.Length - 1] && a[a.Length - 1] == '0')
            return "0";
        else if (a[a.Length - 1] == '1' || b[b.Length - 1] == '1')
            return "1";
        
        return string.Empty;
    }
}
